// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ReqnrollSeleniumFramework.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Test scenarios for Skills tab on Profile page")]
    public partial class TestScenariosForSkillsTabOnProfilePageFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Test scenarios for Skills tab on Profile page", "As a user, I am able to add, edit or delete my Skills records", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Skills.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that user is able to add a new Skill")]
        [NUnit.Framework.CategoryAttribute("Skill")]
        [NUnit.Framework.CategoryAttribute("Add")]
        [NUnit.Framework.TestCaseAttribute("Testing", "Intermediate", null)]
        [NUnit.Framework.TestCaseAttribute("Agile", "Beginner", null)]
        [NUnit.Framework.TestCaseAttribute("Communication", "Expert", null)]
        public async System.Threading.Tasks.Task VerifyThatUserIsAbleToAddANewSkill(string skill, string level, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Skill",
                    "Add"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("skill", skill);
            argumentsOfScenario.Add("level", level);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify that user is able to add a new Skill", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
 await testRunner.GivenAsync("the user is on the Skills tab of the profile page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.WhenAsync(string.Format("the user adds a skill \"{0}\" with \"{1}\"", skill, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
 await testRunner.ThenAsync(string.Format("the skill \"{0}\" with \"{1}\" should be added successfully", skill, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that user is able to edit a Skill")]
        [NUnit.Framework.CategoryAttribute("Skill")]
        [NUnit.Framework.CategoryAttribute("Edit")]
        [NUnit.Framework.TestCaseAttribute("Skating", "Beginner", "Running", "Expert", null)]
        public async System.Threading.Tasks.Task VerifyThatUserIsAbleToEditASkill(string skill, string level, string editedSkill, string editedLevel, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Skill",
                    "Edit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("skill", skill);
            argumentsOfScenario.Add("level", level);
            argumentsOfScenario.Add("editedSkill", editedSkill);
            argumentsOfScenario.Add("editedLevel", editedLevel);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify that user is able to edit a Skill", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 21
 await testRunner.GivenAsync("the user is on the Skills tab of the profile page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 22
 await testRunner.WhenAsync(string.Format("the user adds a skill \"{0}\" with \"{1}\"", skill, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
 await testRunner.AndAsync(string.Format("the user edit a skill \"{0}\" with \"{1}\"", editedSkill, editedLevel), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
 await testRunner.ThenAsync(string.Format("the edited Skill \"{0}\" with \"{1}\" should be edited successfully", editedSkill, editedLevel), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that user is able to Delete a Skill")]
        [NUnit.Framework.CategoryAttribute("Skill")]
        [NUnit.Framework.CategoryAttribute("Delete")]
        [NUnit.Framework.TestCaseAttribute("API", "Intermediate", null)]
        public async System.Threading.Tasks.Task VerifyThatUserIsAbleToDeleteASkill(string skill, string level, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Skill",
                    "Delete"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("skill", skill);
            argumentsOfScenario.Add("level", level);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify that user is able to Delete a Skill", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 33
 await testRunner.GivenAsync("the user is on the Skills tab of the profile page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 34
 await testRunner.WhenAsync(string.Format("the user adds a skill \"{0}\" with \"{1}\"", skill, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 35
 await testRunner.AndAsync(string.Format("the user delete a skill \"{0}\"", skill), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
 await testRunner.ThenAsync(string.Format("the skill \"{0}\" with \"{1}\" should be deleted successfully", skill, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that correct message is displayed when adding invalid Skill")]
        [NUnit.Framework.CategoryAttribute("Skill")]
        [NUnit.Framework.CategoryAttribute("InvalidInput")]
        [NUnit.Framework.TestCaseAttribute("%+&#56)g^5", "Beginner", "%+&#56)g^5 has been added to your skills", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "Please enter skill and experience level", null)]
        [NUnit.Framework.TestCaseAttribute("<test>", "Expert", "has been added to your skills", null)]
        public async System.Threading.Tasks.Task VerifyThatCorrectMessageIsDisplayedWhenAddingInvalidSkill(string skill, string level, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Skill",
                    "InvalidInput"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("skill", skill);
            argumentsOfScenario.Add("level", level);
            argumentsOfScenario.Add("message", message);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify that correct message is displayed when adding invalid Skill", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 44
 await testRunner.GivenAsync("the user is on the Skills tab of the profile page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 45
 await testRunner.WhenAsync(string.Format("the user adds a skill \"{0}\" with \"{1}\"", skill, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 46
 await testRunner.ThenAsync(string.Format("the message \"{0}\" should be displayed successfully", message), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify duplicate error messages")]
        [NUnit.Framework.CategoryAttribute("Skill")]
        [NUnit.Framework.CategoryAttribute("Duplicate")]
        public async System.Threading.Tasks.Task VerifyDuplicateErrorMessages()
        {
            string[] tagsOfScenario = new string[] {
                    "Skill",
                    "Duplicate"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify duplicate error messages", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 57
  await testRunner.GivenAsync("the user is on the Skills tab of the profile page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "skill",
                            "level"});
                table3.AddRow(new string[] {
                            "Manual",
                            "Expert"});
                table3.AddRow(new string[] {
                            "Manual",
                            "Expert"});
                table3.AddRow(new string[] {
                            "Manual",
                            "Intermediate"});
#line 58
  await testRunner.WhenAsync("the user adds multiple skills:", ((string)(null)), table3, "When ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "errorMessage"});
                table4.AddRow(new string[] {
                            "Manual has been added to your skills"});
                table4.AddRow(new string[] {
                            "This skill is already exist in your skill list."});
                table4.AddRow(new string[] {
                            "Duplicated data"});
#line 63
  await testRunner.ThenAsync("duplicate error messages for skills should be displayed successfully:", ((string)(null)), table4, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that the skill field can handle large payloads")]
        [NUnit.Framework.CategoryAttribute("Language")]
        [NUnit.Framework.CategoryAttribute("Destructive")]
        public async System.Threading.Tasks.Task VerifyThatTheSkillFieldCanHandleLargePayloads()
        {
            string[] tagsOfScenario = new string[] {
                    "Language",
                    "Destructive"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify that the skill field can handle large payloads", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 72
  await testRunner.GivenAsync("the user is on the Skills tab of the profile page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 73
  await testRunner.WhenAsync("the user adds a skill with a large payload and level", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 74
  await testRunner.ThenAsync("a validation message should be displayed successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
