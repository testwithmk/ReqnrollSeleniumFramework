// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ReqnrollSeleniumFramework.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Test scenarios for Language tab on Profile page")]
    public partial class TestScenariosForLanguageTabOnProfilePageFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Test scenarios for Language tab on Profile page", "As a user, I am able to add, edit or delete my language records", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Language.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that user is able to add a new Language")]
        [NUnit.Framework.CategoryAttribute("Language")]
        [NUnit.Framework.CategoryAttribute("Add")]
        [NUnit.Framework.TestCaseAttribute("Hindi", "Fluent", null)]
        [NUnit.Framework.TestCaseAttribute("French", "Basic", null)]
        [NUnit.Framework.TestCaseAttribute("Chinese", "Conversational", null)]
        public async System.Threading.Tasks.Task VerifyThatUserIsAbleToAddANewLanguage(string language, string level, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Language",
                    "Add"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("language", language);
            argumentsOfScenario.Add("level", level);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify that user is able to add a new Language", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
 await testRunner.GivenAsync("the user is on the languages tab of the profile page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.WhenAsync(string.Format("the user adds \"{0}\" with \"{1}\"", language, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
 await testRunner.ThenAsync(string.Format("the \"{0}\" with \"{1}\" should be added successfully", language, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that user is able to edit a Language")]
        [NUnit.Framework.CategoryAttribute("Language")]
        [NUnit.Framework.CategoryAttribute("Edit")]
        [NUnit.Framework.TestCaseAttribute("English", "Fluent", "Japanese", "Basic", null)]
        public async System.Threading.Tasks.Task VerifyThatUserIsAbleToEditALanguage(string language, string level, string editedLanguage, string editedLevel, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Language",
                    "Edit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("language", language);
            argumentsOfScenario.Add("level", level);
            argumentsOfScenario.Add("editedLanguage", editedLanguage);
            argumentsOfScenario.Add("editedLevel", editedLevel);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify that user is able to edit a Language", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 21
 await testRunner.GivenAsync("the user is on the languages tab of the profile page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 22
 await testRunner.WhenAsync(string.Format("the user adds \"{0}\" with \"{1}\"", language, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
 await testRunner.AndAsync(string.Format("the user edit \"{0}\" with \"{1}\"", editedLanguage, editedLevel), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
 await testRunner.ThenAsync(string.Format("the \"{0}\" with \"{1}\" should be edited successfully", editedLanguage, editedLevel), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that user is able to Delete a Language")]
        [NUnit.Framework.CategoryAttribute("Language")]
        [NUnit.Framework.CategoryAttribute("Delete")]
        [NUnit.Framework.TestCaseAttribute("Tamil", "Fluent", null)]
        public async System.Threading.Tasks.Task VerifyThatUserIsAbleToDeleteALanguage(string language, string level, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Language",
                    "Delete"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("language", language);
            argumentsOfScenario.Add("level", level);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify that user is able to Delete a Language", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 33
 await testRunner.GivenAsync("the user is on the languages tab of the profile page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 34
 await testRunner.WhenAsync(string.Format("the user adds \"{0}\" with \"{1}\"", language, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 35
 await testRunner.AndAsync(string.Format("the user delete \"{0}\"", language), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
 await testRunner.ThenAsync(string.Format("the \"{0}\" with \"{1}\" should be deleted successfully", language, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that correct message is displayed when adding invalid Language")]
        [NUnit.Framework.CategoryAttribute("Language")]
        [NUnit.Framework.CategoryAttribute("InvalidInput")]
        [NUnit.Framework.TestCaseAttribute("%!@#$%^&*()_+&#124;}", "Fluent", "%!@#$%^&*()_+&#124;} has been added to your languages", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "Please enter language and level", null)]
        [NUnit.Framework.TestCaseAttribute("<script>alert(\'x\')</script>", "Basic", "has been added to your languages", null)]
        public async System.Threading.Tasks.Task VerifyThatCorrectMessageIsDisplayedWhenAddingInvalidLanguage(string language, string level, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Language",
                    "InvalidInput"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("language", language);
            argumentsOfScenario.Add("level", level);
            argumentsOfScenario.Add("message", message);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify that correct message is displayed when adding invalid Language", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 44
 await testRunner.GivenAsync("the user is on the languages tab of the profile page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 45
 await testRunner.WhenAsync(string.Format("the user adds \"{0}\" with \"{1}\"", language, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 46
 await testRunner.ThenAsync(string.Format("the \"{0}\" should be displayed successfully", message), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify duplicate error messages")]
        [NUnit.Framework.CategoryAttribute("Language")]
        [NUnit.Framework.CategoryAttribute("Duplicate")]
        public async System.Threading.Tasks.Task VerifyDuplicateErrorMessages()
        {
            string[] tagsOfScenario = new string[] {
                    "Language",
                    "Duplicate"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify duplicate error messages", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 57
  await testRunner.GivenAsync("the user is on the languages tab of the profile page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "language",
                            "level"});
                table1.AddRow(new string[] {
                            "Spanish",
                            "Conversational"});
                table1.AddRow(new string[] {
                            "Spanish",
                            "Conversational"});
                table1.AddRow(new string[] {
                            "Spanish",
                            "Basic"});
#line 58
  await testRunner.WhenAsync("the user adds multiple languages:", ((string)(null)), table1, "When ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "errorMessage"});
                table2.AddRow(new string[] {
                            "Spanish has been added to your languages"});
                table2.AddRow(new string[] {
                            "This language is already exist in your language list."});
                table2.AddRow(new string[] {
                            "Duplicated data"});
#line 63
  await testRunner.ThenAsync("the following duplicate error messages should be displayed successfully:", ((string)(null)), table2, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that the language field can handle large payloads")]
        [NUnit.Framework.CategoryAttribute("Language")]
        [NUnit.Framework.CategoryAttribute("Destructive")]
        public async System.Threading.Tasks.Task VerifyThatTheLanguageFieldCanHandleLargePayloads()
        {
            string[] tagsOfScenario = new string[] {
                    "Language",
                    "Destructive"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify that the language field can handle large payloads", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 72
  await testRunner.GivenAsync("the user is on the languages tab of the profile page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 73
  await testRunner.WhenAsync("the user adds a language with a large payload and level", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 74
  await testRunner.ThenAsync("the system should display a validation message", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
